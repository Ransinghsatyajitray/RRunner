#rownames(tabla1) <- tabla1[, 1] ## set rownames
#column_to_rownames(tabla1,1)
tabla1 <- mutate(tabla1,Category=X__1) #row.names(tabla1)
tabla1 <- tabla1[, -1]
# Process the data
library(reshape2)
tabla1.molten <- melt(tabla1, value.name="Count", measure.vars = c("X1", "X2", "X3"), id.vars = "Category", na.rm=TRUE)
# plot and facet by categories
library(ggplot2)
ggplot(tabla1.molten, aes(x=variable, y=Count, fill = variable)) + geom_bar(stat="identity", show.legend = FALSE) + facet_wrap(~Category)
ggsave(filename = "mychart.png")
# Write the result
done()
# free up all variables
#rm(list=ls())
View(tabla1)
# Read the input files
tabla1 <- getTable("mychart")
#rownames(tabla1) <- tabla1[, 1] ## set rownames
#column_to_rownames(tabla1,1)
tabla1 <- mutate(tabla1,Category=X__1) #row.names(tabla1)
View(tabla1)
#rownames(tabla1) <- tabla1[, 1] ## set rownames
#column_to_rownames(tabla1,1)
tabla1 <- mutate(tabla1,Category=1) #row.names(tabla1)
View(tabla1)
View(tabla1)
#rownames(tabla1) <- tabla1[, 1] ## set rownames
#column_to_rownames(tabla1,1)
tabla1 <- mutate(tabla1,Category=.[[1]]) #row.names(tabla1)
#rownames(tabla1) <- tabla1[, 1] ## set rownames
#column_to_rownames(tabla1,1)
tabla1 <- mutate(tabla1,Category=tabla1[[1]]) #row.names(tabla1)
View(tabla1)
tabla1 <- tabla1[, -1]
# Process the data
library(reshape2)
tabla1.molten <- melt(tabla1, value.name="Count", measure.vars = c("X1", "X2", "X3"), id.vars = "Category", na.rm=TRUE)
# plot and facet by categories
library(ggplot2)
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# We are going to use the diamonds data set that comes with ggplot2
library(ggplot2)
diamonds<- data.frame(diamonds)
writeResult(tablenames = list("result"=diamonds))
done()
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# We are going to use the diamonds data set that comes with ggplot2
library(ggplot2)
diamonds<- getTable("diamonds")
diamonds <- mutate(diamonds, cubic=length*width*depth)
# Select only the calculated column to return less information
diamonds <- select(diamonds, cubic)
writeResult(tablenames = list("result"=diamonds))
done()
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# libraries for data manipulation
library(dplyr)
# Read the input files
diamonds<- getTable("diamonds")
#  let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
diamonds$carat2 <- round(diamonds$carat/.25)*.25
# Now, let's create our summary.
Summary <- aggregate(cbind(depthperc, table, price, length, width, depth, cubic)~cut+color+clarity+carat2, data=diamonds, mean)
# Write the result
writeResult(tablenames = list("summary"=Summary))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
library(reshape2)
# Read the input files
diamonds<- getTable("diamonds")
# Then, we'll use the dcast function to get our data into the same pivot table format.
# we're taking the color, clarity, and price columns from the diamonds data frame,
# casting (pivoting) them out by color (rows) and clarity (columns),
# and calculating the average price for each combination.
pivot_table <- dcast(diamonds[,c('color','clarity','price')], color~clarity, mean)
# Write the result
writeResult(tablenames = list("result"=Summary))
# Signal the end of the process
done()
# free up all variables
#rm(list=ls())
View(diamonds)
View(diamonds)
View(pivot_table)
View(pivot_table)
# Now, let's create our summary (Ctrl-Shift-M for the pipe %>% in RStudio)
Summary <- diamonds %>%
group_by(cut, color, clarity, carat2) %>%
summarise_all(funs(mean)) %>%
arrange(desc(cubic))
#  let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
diamonds$carat2 <- round(diamonds$carat/.25)*.25
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
# Read the input files
diamonds<- getTable("diamonds")
#  let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
diamonds$carat2 <- round(diamonds$carat/.25)*.25
# Now, let's create our summary (Ctrl-Shift-M for the pipe %>% in RStudio)
Summary <- diamonds %>%
group_by(cut, color, clarity, carat2) %>%
summarise_all(funs(mean)) %>%
arrange(desc(cubic))
# Write the result
writeResult(tablenames = list("result"=Summary))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
# Read the input files
diamonds<- getTable("diamonds")
#  let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
diamonds$carat2 <- round(diamonds$carat/.25)*.25
# Now, let's create our summary (Ctrl-Shift-M for the pipe %>% in RStudio)
Summary <- diamonds %>%
group_by(cut, color, clarity, carat2) %>%
summarise_all(list(mean)) %>%
arrange(desc(cubic))
# Write the result
writeResult(tablenames = list("result"=Summary))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
# Read the input files
diamonds<- getTable("diamonds")
#  let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
diamonds$carat2 <- round(diamonds$carat/.25)*.25
# Now, let's create our summary (Ctrl-Shift-M for the pipe %>% in RStudio)
Summary <- diamonds %>%
group_by(cut, color, clarity, carat2) %>%
summarise_all(list(mean)) %>%
arrange(desc(cubic))
# Write the result
writeResult(tablenames = list("result"=Summary))
# Signal the end of the process
done()
# free up all variables
#rm(list=ls())
View(Summary)
View(Summary)
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# libraries for data manipulation
library(dplyr)
# Read the input files
diamonds<- getTable("diamonds")
# Multiply length, width, and depth together in a new column called "cubic"
diamonds <- mutate(diamonds, cubic=length*width*depth)
# let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
# this is an alternative way to mutate
diamonds$carat2 <- round(diamonds$carat/.25)*.25
# Select only the calculated column to return less information
diamonds <- select(diamonds, carat2, cubic)
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# libraries for data manipulation
library(dplyr)
# Read the input files
diamonds<- getTable("diamonds")
# Multiply length, width, and depth together in a new column called "cubic"
diamonds <- mutate(diamonds, cubic=length*width*depth)
# let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
# this is an alternative way to mutate
diamonds$carat2 <- round(diamonds$carat/.25)*.25)
# Select only the calculated column to return less information
diamonds <- select(diamonds, carat2, cubic)
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# libraries for data manipulation
library(dplyr)
# Read the input files
diamonds<- getTable("diamonds")
# Multiply length, width, and depth together in a new column called "cubic"
diamonds <- mutate(diamonds, cubic=length*width*depth)
# let's round the carat values to the nearest 0.25 carat so that our numbers are not all over the place.
# this is an alternative way to mutate
diamonds$carat2 <- round(diamonds$carat/.25)*.25
# Select only the calculated column to return less information
diamonds <- select(diamonds, carat2, cubic)
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
#rm(list=ls())
View(diamonds)
View(diamonds)
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
library(reshape2)
# Read the input files
diamonds<- getTable("diamonds")
Summary <- getTable("summary")
# First, let's change the name of the price column in the Summary data frame to avgprice.
# This way, we won't have two price fields when we bring it over.
names(Summary)[7]<-"avgprice"
# Next, let's merge the data sets and bring over the average price.
diamonds <- inner_join(diamonds, Summary, by = c("cut", "color", "clarity", "carat2" ) ) %>%
select(cut, color, clarity, carat2, depthperc, table, price, length, width, depth, cubic)
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
library(reshape2)
# Read the input files
diamonds<- getTable("diamonds")
Summary <- getTable("summary")
# First, let's change the name of the price column in the Summary data frame to avgprice.
# This way, we won't have two price fields when we bring it over.
names(Summary)[7]<-"avgprice"
# Next, let's merge the data sets and bring over the average price.
diamonds <- inner_join(diamonds, select(Summary, "cut", "color", "clarity", "carat2", "avgprice"))
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
library(reshape2)
# Read the input files
diamonds<- getTable("diamonds")
# Let's say we wanted to categorize diamonds into size categories
# such as small, medium, and large based on their carat weight.
diamonds$size[diamonds$carat < 0.5] <- "Small"
diamonds$size[diamonds$carat >=0.5 & diamonds$carat < 1] <- "Medium"
diamonds$size[diamonds$carat >= 1] <- "Large"
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
library(reshape2)
# Read the input files
diamonds<- getTable("diamonds")
# Let's say we wanted to categorize diamonds into size categories
# such as small, medium, and large based on their carat weight.
mutate(diamonds, size = case_when(carat < 0.5 ~ "Small",
carat >= 0.5 ~ "Medium",
carat >= 1 ~ "Large"))
# Select only the size to return less information
diamonds = select(diamonds, size)
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
# Check if RStudio is running to set the working directory to the script directory
# https://stackoverflow.com/questions/35986037/detect-if-an-r-session-is-run-in-rstudio-at-startup
is.na(Sys.getenv("RSTUDIO", unset = NA))
if (!is.na(Sys.getenv("RSTUDIO", unset = NA))) {
# Get current directory
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to current directory (script directory)
setwd(current_dir)
} else {
# If sourced https://stackoverflow.com/questions/13672720/r-command-for-setting-working-directory-to-source-file-location-in-rstudio
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
}
# Include the excel helper functions
source("excelhelper.r")
# library for data manipulation
library(dplyr)
library(reshape2)
# Read the input files
diamonds<- getTable("diamonds")
# Let's say we wanted to categorize diamonds into size categories
# such as small, medium, and large based on their carat weight.
diamonds = mutate(diamonds, size = case_when(carat < 0.5 ~ "Small",
carat >= 0.5 ~ "Medium",
carat >= 1 ~ "Large"))
# Select only the size to return less information
diamonds = select(diamonds, size)
# Write the result
writeResult(tablenames = list("result"=diamonds))
# Signal the end of the process
done()
# free up all variables
rm(list=ls())
